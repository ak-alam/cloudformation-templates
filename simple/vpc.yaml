AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a VPC with public/private subnets

Resources:
  #VPC Creation
  AkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: AK-VPC
  #Intergateway 
  AkIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: AkIGW

  AkIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AkIGW
      VpcId: !Ref AkVPC


  #Subnets Creations
  AkPubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AkVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: AkPubSub1

  AkPubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AkVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: AkPubSub2
  
  AkPrivateSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AkVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: AkPrivateSub1

  AkPrivateSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AkVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: AkPrivateSub2
  #Public and Private Route Table Creation and route assosication.
  AkPubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AkVPC
      Tags:
        - Key: Name
          Value: AkPubRT
  
  AkPubRoute:
    Type: AWS::EC2::Route
    DependsOn: AkIGWAttachment
    Properties:
      RouteTableId: !Ref AkPubRT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref AkIGW
  
  #NatGateway creation
  AkNatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AkNatGWEIP.AllocationId
      SubnetId: !Ref AkPubSub1
      Tags:
      - Key: Name
        Value: AkNatGW

  AkNatGWEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: AkVPC
  
  AkPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AkVPC
      Tags:
        - Key: Name
          Value: AkPrivateRT

  RouteNATGateway:
    Type: AWS::EC2::Route
    DependsOn: AkNatGW
    Properties:
      RouteTableId: !Ref AkPrivateRT
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref AkNatGW

  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  AkPubSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AkPubSub1
      RouteTableId: !Ref AkPubRT
  AkPubSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AkPubSub2
      RouteTableId: !Ref AkPubRT
  AkPrivateSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AkPrivateSub1
      RouteTableId: !Ref AkPrivateRT
  AkPrivateSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AkPrivateSub2
      RouteTableId: !Ref AkPrivateRT
  #Security Groups
  AkDBPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Server SGs
      VpcId: !Ref AkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref AkWebServerSG
      Tags:
        - Key: Name
          Value: AkDBPrivateSG

  #IAM Policy
  AKSSMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  AKSSMpolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "AKSSM"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
             - 'ssm:DescribeAssociation'
             - 'ssm:GetParameter'
             - 'ssm:GetParameters'

            Resource: "*"
      Roles: 
        - Ref: "AKSSMRole"
  AkSSMInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "AKSSMRole"

  


  AkWebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Webserver SGs
      VpcId: !Ref AkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AkWebServerSG

  DBRDS:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-090fa75af13c156b4
      InstanceType: t2.micro
      KeyName: ak
      SubnetId: !Ref AkPubSub1
      SecurityGroupIds:
        - !Ref AkDBPrivateSG
      IamInstanceProfile: !Ref AkSSMInstanceProfile
      Tags:
        - Key: Name
          Value: RDSTest
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          db_name=`aws ssm get-parameter --name "/ak/db_name" --query 'Parameter.Value' --output text --region us-east-1`
          db_username=`aws ssm get-parameter --name "/ak/db_username" --query 'Parameter.Value' --output text --region us-east-1`
          db_user_password=`aws ssm get-parameter --name "/ak/user_password" --query 'Parameter.Value' --output text --region us-east-1`
          sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2
          sudo yum install mysql-server -y
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          mysql -h localhost -u root -e "create database $db_name"
          mysql -h localhost -u root -e "CREATE USER '$db_username'@'%' IDENTIFIED BY '$db_user_password'"
          mysql -h localhost -u root -e "GRANT ALL PRIVILEGES ON $db_name.* TO '$db_username'@'%' WITH GRANT OPTION"
          sudo yum -y install expect
          MYSQL_ROOT_PASS=admin
          sleep 5
          echo "Set root password"
          expect -f - <<-EOF
              set timeout 10
              spawn mysql_secure_installation
              expect "Enter current password for root (enter for none):"
              send -- "\r"
              expect "Set root password?"
              send -- "y\r"
              expect "New password:"
              send -- "${MYSQL_ROOT_PASS}\r"
              expect "Re-enter new password:"
              send -- "${MYSQL_ROOT_PASS}\r"
              expect "Remove anonymous users?"
              send -- "y\r"
              expect "Disallow root login remotely?"
              send -- "n\r"
              expect "Remove test database and access to it?"
              send -- "y\r"sudo
              expect "Reload privilege tables now?"
              send -- "y\r"
              expect eof
          EOF


  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-090fa75af13c156b4
      InstanceType: t2.micro
      KeyName: ak
      SubnetId: !Ref AkPubSub1
      SecurityGroupIds:
        - !Ref AkWebServerSG
      Tags:
        - Key: Name
          Value: WebServer
      IamInstanceProfile: !Ref AkSSMInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-linux-extras httpd -y 
          amazon-linux-extras install php7.2 -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          cp -r wordpress/* /var/www/html/
          cp -r wp-config-sample.php wp-config.php
          # DB_NAME=akbar
          # DB_USER=akbar
          # DB_PASSWORD=akbar123
          # DB_HOST=akbar-database.ci6pixnrgmml.us-east-1.rds.amazonaws.com
          db_name=`aws ssm get-parameter --name "/ak/db_name" --query 'Parameter.Value' --output text --region us-east-1`
          db_username=`aws ssm get-parameter --name "/ak/db_username" --query 'Parameter.Value' --output text --region us-east-1`
          db_user_password=`aws ssm get-parameter --name "/ak/user_password" --query 'Parameter.Value' --output text --region us-east-1`
          # DB_HOST=Ak-InternalLB-3ade5c49caf23d97.elb.us-east-1.amazonaws.com
          DB_HOST=10.0.1.77
          sed -i "s/database_name_here/$db_name/g" /var/www/html/wp-config.php
          sed -i "s/username_here/$db_username/g" /var/www/html/wp-config.php
          sed -i "s/password_here/$db_user_password/g" /var/www/html/wp-config.php
          sed -i "s/localhost/$DB_HOST/g" /var/www/html/wp-config.php
          #sed -i "s/wp_/wp1_/g" /var/www/html/wp-config.php
          rm -rf wordpress
          rm -rf latest.tar.gz
          chmod -R 755 /var/www/html/*
          chown -R apache:apache /var/www/html/*